// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

enum Role {
  USER
  ADMIN

  @@map("role")
}

enum Gender {
  FEMININE
  MASCULINE
  OTHERS

  @@map("gender")
}

enum Type {
  ONLINE
  PRESENTIAL

  @@map("type")
}

enum ScheduleType {
  INDIVIDUAL
  IN_GROUP
  COUPLE

  @@map("schedule_type")
}

enum Status {
  PENDING
  REALIZED
  CANCELED

  @@map("status")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @db.VarChar(100)  @unique
  password      String    @db.VarChar(100)
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())   @map("created_at")
  updatedAt     DateTime  @updatedAt        @map("updated_at")

  Professional  Professional?

  Patient       Patient?

  RefreshToken  RefreshToken?

  @@map("users")
}

model Professional {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(150)
  email         String    @db.VarChar(100)  @unique
  crp           String?   @db.VarChar(20)   @unique
  cellphone     String?   @db.VarChar(14)
  approach      String?   @db.VarChar(60)
  createdAt     DateTime  @default(now())   @map("created_at")
  updatedAt     DateTime  @updatedAt        @map("updated_at")

  User          User      @relation(fields: [email], references: [email], onUpdate: Cascade)

  Patient       Patient[]
  
  Resources     Resource[]

  Schedule      Schedule[]

  @@index([email])
  @@map("professionals")
}

model Patient {
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(150)
  cpf             String     @db.VarChar(14)   @unique
  email           String     @db.VarChar(100)  @unique
  gender          Gender
  cellphone       String     @db.VarChar(15)
  birthDate       DateTime   @db.Date          @map("birth_date")
  professionalId  Int                          @map("professional_id")
  active          Boolean    @default(true)
  createdAt       DateTime   @default(now())   @map("created_at")
  updatedAt       DateTime   @updatedAt        @map("updated_at")

  PatientsSchedule    PatientsSchedule[]

  Professional        Professional             @relation(fields: [professionalId], references: [id])

  User                User                     @relation(fields: [email], references: [email], onUpdate: Cascade)

  @@index([professionalId])
  @@index([email])
  @@map("patients")
}

model Schedule {
  id              Int           @id @default(autoincrement())
  sessionDate     DateTime                                      @map("session_date")
  status          Status        @default(PENDING)
  type            Type          @default(ONLINE)
  scheduleType    ScheduleType  @map("schedule_type")
  professionalId  Int           @map("professional_id")
  createdAt       DateTime      @default(now())                 @map("created_at")
  updatedAt       DateTime      @updatedAt                      @map("updated_at")

  Professional        Professional        @relation(fields: [professionalId], references: [id])

  PatientsSchedule    PatientsSchedule[]

  Session             Session[]

  @@index([professionalId])
  @@map("schedules")
}

model PatientsSchedule {
  id              Int          @id @default(autoincrement())
  scheduleId      Int          @map("schedule_id")
  patientId       Int          @map("patient_id")

  Schedule        Schedule     @relation(fields: [scheduleId], references: [id])

  Patient         Patient      @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([scheduleId])
  @@map("patients_schedule")
}

model Resource {
  id              Int          @id @default(autoincrement())
  professionalId  Int                                           @map("professional_id")
  title           String       @db.VarChar(150)
  category        String       @db.VarChar(30)
  createdAt       DateTime     @default(now())                  @map("created_at")
  updatedAt       DateTime     @updatedAt                       @map("updated_at")

  Professional    Professional                                  @relation(fields: [professionalId], references: [id])
  Session         Session[]

  @@unique([title, category])
  @@index([professionalId])
  @@map("resources")
}

model Session {
  id              Int          @id @default(autoincrement())
  subject         String       @db.VarChar(150)
  duration        Int
  scheduleId      Int          @map("schedule_id")
  resourceId      Int          @map("resource_id")
  createdAt       DateTime     @default(now())                 @map("created_at")
  updatedAt       DateTime     @updatedAt                      @map("updated_at")

  Schedule        Schedule     @relation(fields: [scheduleId], references: [id])

  Resource        Resource     @relation(fields: [resourceId], references: [id])

  @@index([scheduleId])
  @@map("sessions")
}

model RefreshToken {
  id              String       @id @default(uuid())
  expiresIn       Int
  userId          Int          @unique
  user            User         @relation(fields: [userId], references: [id])

  @@map("refresh_token")
}
